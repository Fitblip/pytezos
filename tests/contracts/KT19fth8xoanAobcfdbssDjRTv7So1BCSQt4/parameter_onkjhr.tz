Right (Left (Right { PUSH (lambda (pair bytes (big_map bytes bytes)) (pair (list operation) (big_map bytes bytes))) { DUP ; CAR ; DIP { CDR } ; UNPACK (or (or (or string string) (or (pair string (lambda bool bool)) (pair string address))) (or (or address (pair address (lambda bool bool))) (or (pair address (lambda (option string) (option string))) (pair string (lambda (set address) (set address)))))) ; IF_NONE { PUSH (pair string unit) (Pair "ArgumentUnpackFailed" Unit) ; FAILWITH } {} ; PAIR ; DUP ; CAR ; DIP { CDR } ; IF_LEFT { IF_LEFT { IF_LEFT { DUP ;
                              DIP { LEFT (or string (pair string (option string))) ; LEFT (or (or (pair string (pair nat (pair nat (pair timestamp (option bytes))))) (pair string address)) (or (pair string address) (pair address nat))) ; LEFT (or (or (or (pair address nat) (pair (pair address (pair nat (option timestamp))) (pair (option nat) (pair (option string) (option timestamp))))) (or (pair address (pair address nat)) (pair address (pair address nat)))) (or (or (pair address (pair nat (option string))) (pair (pair address address) (pair nat (option string)))) (or unit unit))) ; DIP { DUP } ; SWAP ; PUSH string "sNumberOfLastEvent" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumberOfLastEvent" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumberOfLastEvent" ; FAILWITH } {} ; PUSH nat 1 ; ADD ; DUP ; DIP { DIP { DIP { DUP } ; SWAP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sEvents" ; PAIR ; PACK ; MEM ; IF { PUSH (pair string unit) (Pair "EventAlreadyExists" Unit) ;
                                   FAILWITH }
                                 { PUSH string "sEvents" ;
                                   PAIR ;
                                   PACK ;
                                   DIP { PACK ; SOME } ;
                                   UPDATE } } ; PACK ; SOME ; PUSH string "sNumberOfLastEvent" ; PACK ; UPDATE } ;
                              DIP { DUP } ;
                              SWAP ;
                              SENDER ;
                              PUSH string "sRoles" ;
                              PAIR ;
                              PACK ;
                              GET ;
                              IF_NONE { NONE nat }
                                      { UNPACK nat ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                                        SOME } ;
                              IF_NONE { PUSH nat 0 } {} ;
                              PUSH nat 7 ;
                              AND ;
                              PUSH nat 0 ;
                              COMPARE ;
                              EQ ;
                              NOT ;
                              IF {} { PUSH (pair string nat) (Pair "InvalidRole" 7) ; FAILWITH } ;
                              DIP { EMPTY_SET address ; DIP { SENDER } ; PAIR ; DIP { NONE string ; DIP { SENDER ; DIP { EMPTY_MAP nat (pair nat (pair timestamp (option bytes))) } ; PAIR } ; PAIR } ; PAIR } ;
                              DIP { DIP { DUP } ; SWAP } ;
                              SWAP ;
                              DIP { DUP } ;
                              SWAP ;
                              PUSH string "sInvestors" ;
                              PAIR ;
                              PACK ;
                              MEM ;
                              IF { PUSH (pair string unit) (Pair "InvestorAlreadyExists" Unit) ;
                                   FAILWITH }
                                 { PUSH string "sInvestors" ;
                                   PAIR ;
                                   PACK ;
                                   DIP { PACK ; SOME } ;
                                   UPDATE } ;
                              NIL operation }
                            { DUP ;
                              DIP { LEFT (pair string (option string)) ; RIGHT string ; LEFT (or (or (pair string (pair nat (pair nat (pair timestamp (option bytes))))) (pair string address)) (or (pair string address) (pair address nat))) ; LEFT (or (or (or (pair address nat) (pair (pair address (pair nat (option timestamp))) (pair (option nat) (pair (option string) (option timestamp))))) (or (pair address (pair address nat)) (pair address (pair address nat)))) (or (or (pair address (pair nat (option string))) (pair (pair address address) (pair nat (option string)))) (or unit unit))) ; DIP { DUP } ; SWAP ; PUSH string "sNumberOfLastEvent" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumberOfLastEvent" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumberOfLastEvent" ; FAILWITH } {} ; PUSH nat 1 ; ADD ; DUP ; DIP { DIP { DIP { DUP } ; SWAP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sEvents" ; PAIR ; PACK ; MEM ; IF { PUSH (pair string unit) (Pair "EventAlreadyExists" Unit) ;
                                   FAILWITH }
                                 { PUSH string "sEvents" ;
                                   PAIR ;
                                   PACK ;
                                   DIP { PACK ; SOME } ;
                                   UPDATE } } ; PACK ; SOME ; PUSH string "sNumberOfLastEvent" ; PACK ; UPDATE } ;
                              DIP { DUP } ;
                              SWAP ;
                              SENDER ;
                              PUSH string "sRoles" ;
                              PAIR ;
                              PACK ;
                              GET ;
                              IF_NONE { NONE nat }
                                      { UNPACK nat ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                                        SOME } ;
                              IF_NONE { PUSH nat 0 } {} ;
                              PUSH nat 7 ;
                              AND ;
                              PUSH nat 0 ;
                              COMPARE ;
                              EQ ;
                              NOT ;
                              IF {} { PUSH (pair string nat) (Pair "InvalidRole" 7) ; FAILWITH } ;
                              DIP { DUP } ;
                              SWAP ;
                              DIP { DUP } ;
                              SWAP ;
                              DIP { DUP } ;
                              SWAP ;
                              DIP { DUP } ;
                              SWAP ;
                              PUSH string "sInvestors" ;
                              PAIR ;
                              PACK ;
                              GET ;
                              IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                                      { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                                        SOME } ;
                              IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                                        FAILWITH }
                                      { DIP { DIP { DUP } ; SWAP } ;
                                        SWAP ;
                                        SENDER ;
                                        PUSH string "sRoles" ;
                                        PAIR ;
                                        PACK ;
                                        GET ;
                                        IF_NONE { NONE nat }
                                                { UNPACK nat ;
                                                  IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                                                  SOME } ;
                                        IF_NONE { PUSH nat 0 } {} ;
                                        DIP { DUP } ;
                                        SWAP ;
                                        CAR ;
                                        CDR ;
                                        SENDER ;
                                        COMPARE ;
                                        EQ ;
                                        PUSH nat 4 ;
                                        DIP { DIP { DUP } ; SWAP } ;
                                        SWAP ;
                                        COMPARE ;
                                        NEQ ;
                                        OR ;
                                        IF {} { PUSH (pair string unit) (Pair "InvestorAuthorizationFailed" Unit) ; FAILWITH } ;
                                        DROP ;
                                        DROP } ;
                              DROP ;
                              DROP ;
                              DIP { DUP } ;
                              SWAP ;
                              DIP { DUP } ;
                              SWAP ;
                              DUP ;
                              DIP { SWAP } ;
                              PUSH string "sInvestors" ;
                              PAIR ;
                              PACK ;
                              GET ;
                              IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                                      { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                                        SOME } ;
                              IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                                        FAILWITH }
                                      { DIP { DROP } } ;
                              CAR ;
                              CAR ;
                              SIZE ;
                              PUSH nat 0 ;
                              COMPARE ;
                              EQ ;
                              IF {} { PUSH (pair string unit) (Pair "InvestorHasWallets" Unit) ; FAILWITH } ;
                              PUSH string "sInvestors" ;
                              PAIR ;
                              PACK ;
                              DIP { NONE bytes } ;
                              UPDATE ;
                              NIL operation } }
                  { IF_LEFT { DUP ;
                              CAR ;
                              DIP { CDR } ;
                              SWAP ;
                              DIP { PUSH string "sInvestors" ; PAIR ; PACK ; MEM } ;
                              SWAP ;
                              EXEC ;
                              PUSH string "VoidResult" ;
                              PAIR ;
                              FAILWITH }
                            { DUP ;
                              DIP { RIGHT (pair string (pair nat (pair nat (pair timestamp (option bytes))))) ; LEFT (or (pair string address) (pair address nat)) ; RIGHT (or string (or string (pair string (option string)))) ; LEFT (or (or (or (pair address nat) (pair (pair address (pair nat (option timestamp))) (pair (option nat) (pair (option string) (option timestamp))))) (or (pair address (pair address nat)) (pair address (pair address nat)))) (or (or (pair address (pair nat (option string))) (pair (pair address address) (pair nat (option string)))) (or unit unit))) ; DIP { DUP } ; SWAP ; PUSH string "sNumberOfLastEvent" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumberOfLastEvent" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumberOfLastEvent" ; FAILWITH } {} ; PUSH nat 1 ; ADD ; DUP ; DIP { DIP { DIP { DUP } ; SWAP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sEvents" ; PAIR ; PACK ; MEM ; IF { PUSH (pair string unit) (Pair "EventAlreadyExists" Unit) ;
                                   FAILWITH }
                                 { PUSH string "sEvents" ;
                                   PAIR ;
                                   PACK ;
                                   DIP { PACK ; SOME } ;
                                   UPDATE } } ; PACK ; SOME ; PUSH string "sNumberOfLastEvent" ; PACK ; UPDATE } ;
                              DIP { DUP } ;
                              SWAP ;
                              SENDER ;
                              PUSH string "sRoles" ;
                              PAIR ;
                              PACK ;
                              GET ;
                              IF_NONE { NONE nat }
                                      { UNPACK nat ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                                        SOME } ;
                              IF_NONE { PUSH nat 0 } {} ;
                              PUSH nat 7 ;
                              AND ;
                              PUSH nat 0 ;
                              COMPARE ;
                              EQ ;
                              NOT ;
                              IF {} { PUSH (pair string nat) (Pair "InvalidRole" 7) ; FAILWITH } ;
                              DUP ;
                              CAR ;
                              DIP { DUP } ;
                              SWAP ;
                              CDR ;
                              DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                              SWAP ;
                              DIP { DUP } ;
                              SWAP ;
                              DROP ;
                              DROP ;
                              PUSH bool False ;
                              DUP ;
                              NOT ;
                              IF {} { PUSH (pair string unit) (Pair "WalletHasSpecialType" Unit) ; FAILWITH } ;
                              DIP { DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ; SWAP } ;
                              SWAP ;
                              DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                              SWAP ;
                              DIP { SENDER ; DIP { SENDER } ; PAIR } ;
                              PAIR ;
                              DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                              SWAP ;
                              DIP { DIP { DUP } ; SWAP } ;
                              SWAP ;
                              DIP { DUP } ;
                              SWAP ;
                              PUSH string "sWallets" ;
                              PAIR ;
                              PACK ;
                              MEM ;
                              IF { PUSH (pair string unit) (Pair "WalletAlreadyExists" Unit) ;
                                   FAILWITH }
                                 { PUSH string "sWallets" ;
                                   PAIR ;
                                   PACK ;
                                   DIP { PACK ; SOME } ;
                                   UPDATE } ;
                              SWAP ;
                              DIP { SWAP ; DIP { SWAP ; DIP { SWAP ; DIP { SWAP ; DROP } } } } ;
                              DIP { DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ; SWAP } ;
                              SWAP ;
                              DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                              SWAP ;
                              DUP ;
                              DIP { SWAP } ;
                              PUSH string "sInvestors" ;
                              PAIR ;
                              PACK ;
                              GET ;
                              IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                                      { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                                        SOME } ;
                              IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                                        FAILWITH }
                                      { DIP { DROP } } ;
                              DUP ;
                              CAR ;
                              CAR ;
                              DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ;
                              SWAP ;
                              DIP { PUSH bool True } ;
                              UPDATE ;
                              DIP { DUP ; DIP { CDR } ; CAR } ;
                              DIP { DUP ; DIP { CDR } ; CAR } ;
                              DIP { DROP } ;
                              PAIR ;
                              PAIR ;
                              DIP { DIP { DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ; SWAP } ; SWAP } ;
                              SWAP ;
                              DIP { DUP } ;
                              SWAP ;
                              DIP { DIP { DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ; SWAP } ; SWAP } ;
                              SWAP ;
                              PUSH string "sInvestors" ;
                              PAIR ;
                              PACK ;
                              DIP { PACK ; SOME } ;
                              UPDATE ;
                              SWAP ;
                              DIP { SWAP ; DIP { SWAP ; DIP { SWAP ; DIP { SWAP ; DIP { SWAP ; DROP } } } } } ;
                              DROP ;
                              DROP ;
                              DROP ;
                              DROP ;
                              DROP ;
                              NIL operation } } }
        { IF_LEFT { IF_LEFT { DUP ;
                              DIP { DIP { DUP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sWallets" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair string (pair address address)) }
                                      { UNPACK (pair string (pair address address)) ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
                                        SOME } ; IF_NONE { PUSH (pair string unit) (Pair "WalletDoesNotExist" Unit) ;
                                        FAILWITH }
                                      { CAR } ; PAIR ; LEFT (pair address nat) ; RIGHT (or (pair string (pair nat (pair nat (pair timestamp (option bytes))))) (pair string address)) ; RIGHT (or string (or string (pair string (option string)))) ; LEFT (or (or (or (pair address nat) (pair (pair address (pair nat (option timestamp))) (pair (option nat) (pair (option string) (option timestamp))))) (or (pair address (pair address nat)) (pair address (pair address nat)))) (or (or (pair address (pair nat (option string))) (pair (pair address address) (pair nat (option string)))) (or unit unit))) ; DIP { DUP } ; SWAP ; PUSH string "sNumberOfLastEvent" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumberOfLastEvent" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumberOfLastEvent" ; FAILWITH } {} ; PUSH nat 1 ; ADD ; DUP ; DIP { DIP { DIP { DUP } ; SWAP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sEvents" ; PAIR ; PACK ; MEM ; IF { PUSH (pair string unit) (Pair "EventAlreadyExists" Unit) ;
                                   FAILWITH }
                                 { PUSH string "sEvents" ;
                                   PAIR ;
                                   PACK ;
                                   DIP { PACK ; SOME } ;
                                   UPDATE } } ; PACK ; SOME ; PUSH string "sNumberOfLastEvent" ; PACK ; UPDATE } ;
                              DIP { DUP } ;
                              SWAP ;
                              DIP { DUP } ;
                              SWAP ;
                              PUSH string "sWalletsBalances" ;
                              PAIR ;
                              PACK ;
                              GET ;
                              IF_NONE { NONE nat }
                                      { UNPACK nat ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sWalletsBalances" ; FAILWITH } {} ;
                                        SOME } ;
                              IF_NONE { PUSH nat 0 } {} ;
                              PUSH nat 0 ;
                              COMPARE ;
                              EQ ;
                              IF {} { PUSH (pair string (or unit unit)) (Pair "BalanceIsNonZero" (Right Unit)) ; FAILWITH } ;
                              DIP { DUP } ;
                              SWAP ;
                              SENDER ;
                              PUSH string "sRoles" ;
                              PAIR ;
                              PACK ;
                              GET ;
                              IF_NONE { NONE nat }
                                      { UNPACK nat ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                                        SOME } ;
                              IF_NONE { PUSH nat 0 } {} ;
                              PUSH nat 7 ;
                              AND ;
                              PUSH nat 0 ;
                              COMPARE ;
                              EQ ;
                              NOT ;
                              IF {} { PUSH (pair string nat) (Pair "InvalidRole" 7) ; FAILWITH } ;
                              DIP { DUP } ;
                              DUP ;
                              DIP { PUSH string "sWallets" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair string (pair address address)) }
                                      { UNPACK (pair string (pair address address)) ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
                                        SOME } ; IF_NONE { PUSH (pair string unit) (Pair "WalletDoesNotExist" Unit) ;
                                        FAILWITH }
                                      { CAR } } ;
                              DUP ;
                              DIP { SWAP ; DIP { SWAP } ; DIP { DUP } ; SWAP ; DIP { DUP } ; SWAP ; DUP ; DIP { SWAP } ; PUSH string "sInvestors" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                                      { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                                        SOME } ; IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                                        FAILWITH }
                                      { DIP { DROP } } ; DIP { DIP { DIP { DUP } ; SWAP } ; SWAP } ; SWAP ; DIP { DIP { DIP { DIP { DROP } } } } ; DIP { DUP ; CAR ; CAR ; PUSH bool False } ; UPDATE ; DIP { DUP ; DIP { CDR } ; CAR } ; DIP { DUP ; DIP { CDR } ; CAR } ; DIP { DROP } ; PAIR ; PAIR ; SWAP ; PUSH string "sInvestors" ; PAIR ; PACK ; DIP { PACK ; SOME } ; UPDATE } ;
                              PUSH string "sWallets" ;
                              PAIR ;
                              PACK ;
                              DIP { NONE bytes } ;
                              UPDATE ;
                              NIL operation }
                            { DUP ;
                              CAR ;
                              DIP { CDR } ;
                              SWAP ;
                              DIP { PUSH string "sWallets" ; PAIR ; PACK ; MEM } ;
                              SWAP ;
                              EXEC ;
                              PUSH string "VoidResult" ;
                              PAIR ;
                              FAILWITH } }
                  { IF_LEFT { DUP ;
                              CAR ;
                              DIP { CDR } ;
                              SWAP ;
                              DIP { PUSH string "sWallets" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair string (pair address address)) }
                                      { UNPACK (pair string (pair address address)) ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
                                        SOME } ; IF_NONE { NONE string }
                                      { CAR ;
                                        SOME } } ;
                              SWAP ;
                              EXEC ;
                              PUSH string "VoidResult" ;
                              PAIR ;
                              FAILWITH }
                            { DUP ;
                              CAR ;
                              DIP { CDR } ;
                              SWAP ;
                              DIP { DUP ; DIP { SWAP } ; PUSH string "sInvestors" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                                      { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                                        IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                                        SOME } ; IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                                        FAILWITH }
                                      { DIP { DROP } } ; CAR ; CAR } ;
                              SWAP ;
                              EXEC ;
                              PUSH string "VoidResult" ;
                              PAIR ;
                              FAILWITH } } } ; PAIR } ; PUSH string "callRegistry" ; PUSH string "code" ; PAIR ; PACK ; DIP { PACK ; SOME } ; UPDATE }))