Right (Left (Right { PUSH (lambda (pair bytes (big_map bytes bytes)) (pair (list operation) (big_map bytes bytes))) { DUP ; CAR ; DIP { CDR } ; UNPACK (or (pair address nat) (or (pair address (pair nat nat)) (pair (pair address address) (lambda nat nat)))) ; IF_NONE { PUSH (pair string unit) (Pair "ArgumentUnpackFailed" Unit) ; FAILWITH } {} ; PAIR ; DUP ; CAR ; DIP { CDR } ; IF_LEFT { DIP { DUP } ;
          SWAP ;
          PUSH string "sPaused" ;
          PACK ;
          GET ;
          IF_NONE { PUSH string "UStore: no field sPaused" ; FAILWITH } {} ;
          UNPACK bool ;
          IF_NONE { PUSH string "UStore: failed to unpack sPaused" ; FAILWITH } {} ;
          IF { PUSH (pair string unit) (Pair "OperationsArePaused" Unit) ; FAILWITH } {} ;
          DUP ;
          CAR ;
          SENDER ;
          PAIR ;
          DIP { CDR ; DUP ; INT ; EQ ; IF { DROP ;
               NONE nat }
             { SOME } } ;
          PUSH string "sApprovals" ;
          PAIR ;
          PACK ;
          DIP { IF_NONE { NONE bytes }
                  { PACK ;
                    SOME } } ;
          UPDATE ;
          NIL operation }
        { IF_LEFT { DIP { DUP } ;
                    SWAP ;
                    PUSH string "sPaused" ;
                    PACK ;
                    GET ;
                    IF_NONE { PUSH string "UStore: no field sPaused" ; FAILWITH } {} ;
                    UNPACK bool ;
                    IF_NONE { PUSH string "UStore: failed to unpack sPaused" ; FAILWITH } {} ;
                    IF { PUSH (pair string unit) (Pair "OperationsArePaused" Unit) ; FAILWITH } {} ;
                    DUP ;
                    DIP { CAR ; SENDER ; PAIR ; DIP { DUP } ; PUSH string "sApprovals" ; PAIR ; PACK ; GET ; IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sApprovals" ; FAILWITH } {} ;
                              SOME } ; IF_NONE { PUSH nat 0 } {} } ;
                    DUP ;
                    DIP { DUP ; CDR ; CAR ; INT ; DIP { DIP { DUP } ; SWAP } ; SWAP ; INT ; COMPARE ; EQ ; IF { DROP ;
                         DROP }
                       { CDR ;
                         CAR ;
                         DIP {} ;
                         PAIR ;
                         PUSH string "CasApprovalFailure" ;
                         PAIR ;
                         FAILWITH } } ;
                    DUP ;
                    CAR ;
                    SENDER ;
                    PAIR ;
                    DIP { CDR ; CDR ; DUP ; INT ; EQ ; IF { DROP ;
                         NONE nat }
                       { SOME } } ;
                    PUSH string "sApprovals" ;
                    PAIR ;
                    PACK ;
                    DIP { IF_NONE { NONE bytes }
                            { PACK ;
                              SOME } } ;
                    UPDATE ;
                    NIL operation }
                  { DUP ;
                    CAR ;
                    DIP { CDR } ;
                    SWAP ;
                    DIP { PUSH string "sApprovals" ; PAIR ; PACK ; GET ; IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sApprovals" ; FAILWITH } {} ;
                              SOME } ; IF_NONE { PUSH nat 0 } {} } ;
                    SWAP ;
                    EXEC ;
                    PUSH string "VoidResult" ;
                    PAIR ;
                    FAILWITH } } ; PAIR } ; PUSH string "callTokenApprovals" ; PUSH string "code" ; PAIR ; PACK ; DIP { PACK ; SOME } ; UPDATE }))