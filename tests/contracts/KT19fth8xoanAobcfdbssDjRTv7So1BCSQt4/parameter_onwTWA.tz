Right (Left (Right { PUSH (lambda (pair (pair address (pair address nat)) (big_map bytes bytes)) (big_map bytes bytes)) { DUP ; CAR ; DIP { CDR } ; DUP ; DIP { DIP { DUP } ; SWAP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CDR ; CDR ; CDR ; CDR ; IF { CDR ;
     CAR ;
     DIP { DUP } ;
     PUSH string "sWallets" ;
     PAIR ;
     PACK ;
     GET ;
     IF_NONE { NONE (pair string (pair address address)) }
             { UNPACK (pair string (pair address address)) ;
               IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
               SOME } ;
     IF_NONE { PUSH (pair string unit) (Pair "WalletDoesNotExist" Unit) ;
               FAILWITH }
             { CAR } ;
     DIP { DUP } ;
     PUSH string "sInvestors" ;
     PAIR ;
     PACK ;
     GET ;
     IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
             { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
               IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
               SOME } ;
     IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
               FAILWITH }
             { CDR ;
               CDR ;
               CDR ;
               DIP { PUSH bool False } ;
               ITER { DUP ; CAR ; DIP { CDR } ; PUSH nat 2 ; AND ; PUSH nat 0 ; COMPARE ; NEQ ; DIP { CAR ; PUSH nat 1 ; COMPARE ; EQ } ; AND ; OR } } ;
     IF {} { PUSH (pair string unit) (Pair "InvestorNotAccredited" Unit) ; FAILWITH } }
   { DROP } } ; DUP ; DIP { DIP { DUP } ; SWAP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CDR ; CDR ; CDR ; CAR ; IF { DUP ;
     CAR ;
     DIP { CDR ; CDR } ;
     DIP { DIP { DUP } ; SWAP } ;
     PUSH string "sWalletsBalances" ;
     PAIR ;
     PACK ;
     GET ;
     IF_NONE { NONE nat }
             { UNPACK nat ;
               IF_NONE { PUSH string "UStore: failed to unpack sWalletsBalances" ; FAILWITH } {} ;
               SOME } ;
     IF_NONE { PUSH nat 0 } {} ;
     COMPARE ;
     EQ ;
     IF {} { PUSH (pair string unit) (Pair "ForceFullTransferViolated" Unit) ; FAILWITH } }
   { DROP } } ; DUP ; DIP { DIP { DUP } ; SWAP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CDR ; CAR ; CAR ; CAR ; IF { DUP ;
     CAR ;
     DIP { DIP { DUP } ; SWAP } ;
     SWAP ;
     SWAP ;
     PUSH string "sWallets" ;
     PAIR ;
     PACK ;
     GET ;
     IF_NONE { NONE (pair string (pair address address)) }
             { UNPACK (pair string (pair address address)) ;
               IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
               SOME } ;
     IF_NONE { PUSH (pair string unit) (Pair "WalletDoesNotExist" Unit) ;
               FAILWITH }
             { CAR } ;
     DIP { DIP { DUP } ; SWAP } ;
     DIP { DUP } ;
     PUSH string "sInvestors" ;
     PAIR ;
     PACK ;
     GET ;
     IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
             { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
               IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
               SOME } ;
     IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
               FAILWITH }
             { CDR ;
               CAR } ;
     IF_NONE { DROP ;
               PUSH nat 0 }
             { PUSH string "sCountryStatuses" ;
               PAIR ;
               PACK ;
               GET ;
               IF_NONE { NONE nat }
                       { UNPACK nat ;
                         IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                         SOME } ;
               IF_NONE { PUSH nat 0 } {} } ;
     PUSH nat 1 ;
     COMPARE ;
     EQ ;
     NOT ;
     DIP { CDR ; CAR ; DIP { DUP ; DUP } ; PUSH string "sWallets" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair string (pair address address)) }
             { UNPACK (pair string (pair address address)) ;
               IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
               SOME } ; IF_NONE { PUSH (pair string unit) (Pair "WalletDoesNotExist" Unit) ;
               FAILWITH }
             { CAR } ; DIP { DUP } ; PUSH string "sInvestors" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
             { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
               IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
               SOME } ; IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
               FAILWITH }
             { CDR ;
               CAR } ; IF_NONE { DROP ;
               PUSH nat 0 }
             { PUSH string "sCountryStatuses" ;
               PAIR ;
               PACK ;
               GET ;
               IF_NONE { NONE nat }
                       { UNPACK nat ;
                         IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                         SOME } ;
               IF_NONE { PUSH nat 0 } {} } ; PUSH nat 1 ; COMPARE ; EQ ; NOT } ;
     NOT ;
     OR ;
     IF {} { PUSH (pair string unit) (Pair "FlowbackBlockedViolated" Unit) ; FAILWITH } }
   { DROP } } ; DUP ; DIP { CAR ; DIP { DUP } ; PUSH string "sWallets" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair string (pair address address)) }
        { UNPACK (pair string (pair address address)) ;
          IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
          SOME } ; IF_NONE { PUSH (pair string unit) (Pair "WalletDoesNotExist" Unit) ;
          FAILWITH }
        { CAR } ; DIP { DUP } ; DIP { DUP } ; PUSH string "sInvestors" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
        { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
          IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
          SOME } ; IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
          FAILWITH }
        { CDR ;
          CAR } ; IF_NONE { DROP ;
          PUSH nat 0 }
        { PUSH string "sCountryStatuses" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE nat }
                  { UNPACK nat ;
                    IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH nat 0 } {} } ; PUSH nat 1 ; COMPARE ; EQ ; DIP { DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CDR ; CAR ; CAR ; CDR ; NOT } ; NOT ; OR ; IF {} { PUSH (pair string unit) (Pair "USLockViolated" Unit) ; FAILWITH } } ; CDR ; CAR ; DIP { DUP } ; DIP { DUP } ; PUSH string "sWallets" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair string (pair address address)) }
        { UNPACK (pair string (pair address address)) ;
          IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
          SOME } ; IF_NONE { PUSH (pair string unit) (Pair "WalletDoesNotExist" Unit) ;
          FAILWITH }
        { CAR } ; DIP { DUP } ; PUSH string "sInvestors" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
        { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
          IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
          SOME } ; IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
          FAILWITH }
        { CDR ;
          CAR } ; IF_NONE { DROP }
        { PUSH string "sCountryStatuses" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE nat }
                  { UNPACK nat ;
                    IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH nat 0 } {} ;
          PUSH nat 3 ;
          COMPARE ;
          EQ ;
          IF { PUSH (pair string unit) (Pair "InvestorCountryBlocked" Unit) ; FAILWITH } {} } } ; PACK ; SOME ; PUSH string "sPreTransferCheck" ; PACK ; UPDATE }))