Right (Left (Right { PUSH (lambda (pair (pair address (pair address nat)) (big_map bytes bytes)) (big_map bytes bytes)) { DUP ; CAR ; DIP { CDR } ; DUP ; DIP { DUP ; DIP { CAR ; DIP { DUP } ; PUSH string "sWallets" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair string (pair address address)) }
        { UNPACK (pair string (pair address address)) ;
          IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
          SOME } ; IF_NONE { PUSH (pair string unit) (Pair "WalletDoesNotExist" Unit) ;
          FAILWITH }
        { CAR } ; DIP { DUP } ; PUSH string "sLocked" ; PAIR ; PACK ; MEM ; IF { PUSH (pair string unit) (Pair "InvestorLocked" Unit) ; FAILWITH } {} } ; DUP ; CAR ; DIP { CDR ; CDR } ; DIP { DIP { DUP } ; SWAP } ; PUSH string "sWallets" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair string (pair address address)) }
        { UNPACK (pair string (pair address address)) ;
          IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
          SOME } ; IF_NONE { PUSH (pair string unit) (Pair "WalletDoesNotExist" Unit) ;
          FAILWITH }
        { CAR } ; DIP { DUP } ; SWAP ; PUSH nat 0 ; COMPARE ; EQ ; IF { DROP ;
     DROP }
   { DIP { DIP { DUP } ; SWAP } ;
     SWAP ;
     DIP { DUP } ;
     SWAP ;
     PUSH string "sInvestorsBalances" ;
     PAIR ;
     PACK ;
     GET ;
     IF_NONE { NONE nat }
             { UNPACK nat ;
               IF_NONE { PUSH string "UStore: failed to unpack sInvestorsBalances" ; FAILWITH } {} ;
               SOME } ;
     IF_NONE { PUSH nat 0 } {} ;
     DIP { SWAP } ;
     COMPARE ;
     EQ ;
     IF { DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          PUSH string "sInvestors" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CAR } ;
          IF_NONE { DROP ;
                    PUSH nat 0 }
                  { PUSH string "sCountryStatuses" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} } ;
          PUSH nat 1 ;
          COMPARE ;
          EQ ;
          IF { DIP { DUP ; DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CAR ; CDR ; CAR ; CAR ; IF_NONE { DROP }
                  { DIP { PUSH string "sNumOfUSInvestors" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfUSInvestors" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfUSInvestors" ; FAILWITH } {} ; PUSH nat 1 ; SWAP ; SUB ; ISNAT ; IF_NONE { PUSH string "Negative amount of investors" ; FAILWITH } {} } ;
                    COMPARE ;
                    GE ;
                    IF {} { PUSH (pair string unit) (Pair "MaxNumberOfUSInvestorsViolation" Unit) ; FAILWITH } } } } {} ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          PUSH string "sInvestors" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CDR ;
                    CDR ;
                    DIP { PUSH bool False } ;
                    ITER { DUP ; CAR ; DIP { CDR } ; PUSH nat 2 ; AND ; PUSH nat 0 ; COMPARE ; NEQ ; DIP { CAR ; PUSH nat 1 ; COMPARE ; EQ } ; AND ; OR } } ;
          NOT ;
          IF { DIP { DUP ; DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CAR ; CDR ; CDR ; CAR ; IF_NONE { DROP }
                  { DIP { PUSH string "sNumOfNonAccrInvs" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfNonAccrInvs" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfNonAccrInvs" ; FAILWITH } {} ; PUSH nat 1 ; SWAP ; SUB ; ISNAT ; IF_NONE { PUSH string "Negative amount of investors" ; FAILWITH } {} } ;
                    COMPARE ;
                    GE ;
                    IF {} { PUSH (pair string unit) (Pair "MaxNumberOfNonAccreditedInvestorsViolation" Unit) ; FAILWITH } } } } {} ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DIP { DIP { DUP } ; PUSH string "sInvestors" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ; IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CAR } ; IF_NONE { DROP ;
                    PUSH nat 0 }
                  { PUSH string "sCountryStatuses" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} } ; PUSH nat 1 ; COMPARE ; EQ } } ;
          PUSH string "sInvestors" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CDR ;
                    CDR ;
                    DIP { PUSH bool False } ;
                    ITER { DUP ; CAR ; DIP { CDR } ; PUSH nat 2 ; AND ; PUSH nat 0 ; COMPARE ; NEQ ; DIP { CAR ; PUSH nat 1 ; COMPARE ; EQ } ; AND ; OR } } ;
          NOT ;
          NOT ;
          AND ;
          IF { DIP { DUP ; DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CAR ; CDR ; CAR ; CDR ; IF_NONE { DROP }
                  { DIP { PUSH string "sNumOfUSAccrInvs" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfUSAccrInvs" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfUSAccrInvs" ; FAILWITH } {} ; PUSH nat 1 ; SWAP ; SUB ; ISNAT ; IF_NONE { PUSH string "Negative amount of investors" ; FAILWITH } {} } ;
                    COMPARE ;
                    GE ;
                    IF {} { PUSH (pair string unit) (Pair "MaxNumberOfUSAccreditedInvestorsViolation" Unit) ; FAILWITH } } } } {} ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DIP { PUSH string "sInvestors" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ; IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CDR ;
                    CDR ;
                    DIP { PUSH bool False } ;
                    ITER { DUP ; CAR ; DIP { CDR } ; PUSH nat 12 ; AND ; PUSH nat 0 ; COMPARE ; NEQ ; DIP { CAR ; PUSH nat 1 ; COMPARE ; EQ } ; AND ; OR } } ; NOT } } ;
          DIP { DUP } ;
          PUSH string "sInvestors" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CAR } ;
          IF_NONE { DROP ;
                    PUSH nat 0 }
                  { PUSH string "sCountryStatuses" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} } ;
          PUSH nat 2 ;
          COMPARE ;
          EQ ;
          AND ;
          IF { DIP { DUP ; DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CDR ; CDR ; CAR ; CDR ; DIP { PUSH string "sNumOfEURetailers" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfEURetailers" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfEURetailers" ; FAILWITH } {} ; PUSH nat 1 ; SWAP ; SUB ; ISNAT ; IF_NONE { PUSH string "Negative amount of investors" ; FAILWITH } {} } ; COMPARE ; GE ; IF {} { PUSH (pair string unit) (Pair "MaxNumberOfEURetailInvestorsViolation" Unit) ; FAILWITH } } } {} ;
          DIP { DUP } ;
          DIP { DUP } ;
          PUSH string "sInvestors" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CAR } ;
          IF_NONE { DROP ;
                    PUSH nat 0 }
                  { PUSH string "sCountryStatuses" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} } ;
          PUSH nat 1 ;
          COMPARE ;
          EQ ;
          IF { DUP ;
               PUSH string "sNumOfUSInvestors" ;
               PACK ;
               GET ;
               IF_NONE { PUSH string "UStore: no field sNumOfUSInvestors" ; FAILWITH } {} ;
               UNPACK nat ;
               IF_NONE { PUSH string "UStore: failed to unpack sNumOfUSInvestors" ; FAILWITH } {} ;
               PUSH nat 1 ;
               SWAP ;
               SUB ;
               ISNAT ;
               IF_NONE { PUSH string "Negative amount of investors" ; FAILWITH } {} }
             { DUP ;
               PUSH string "sNumOfUSInvestors" ;
               PACK ;
               GET ;
               IF_NONE { PUSH string "UStore: no field sNumOfUSInvestors" ; FAILWITH } {} ;
               UNPACK nat ;
               IF_NONE { PUSH string "UStore: failed to unpack sNumOfUSInvestors" ; FAILWITH } {} } ;
          DIP { DUP ; PUSH string "sNumOfInvestors" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfInvestors" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfInvestors" ; FAILWITH } {} ; PUSH nat 1 ; SWAP ; SUB ; ISNAT ; IF_NONE { PUSH string "Negative amount of investors" ; FAILWITH } {} } ;
          DIP { DIP { DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CAR ; CDR ; CDR ; CDR } ; MUL } ;
          PUSH nat 100 ;
          MUL ;
          COMPARE ;
          LE ;
          IF {} { PUSH (pair string unit) (Pair "MaxPercentageOfUSInvestorsViolation" Unit) ; FAILWITH } ;
          DUP ;
          DUP ;
          PUSH string "sComplianceInfo" ;
          PACK ;
          GET ;
          IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ;
          UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ;
          IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ;
          CDR ;
          CAR ;
          CDR ;
          CAR ;
          DIP { PUSH string "sNumOfInvestors" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfInvestors" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfInvestors" ; FAILWITH } {} ; PUSH nat 1 ; SWAP ; SUB ; ISNAT ; IF_NONE { PUSH string "Negative amount of investors" ; FAILWITH } {} } ;
          COMPARE ;
          LE ;
          IF {} { PUSH (pair string unit) (Pair "MinNumberOfInvestorsViolation" Unit) ; FAILWITH } ;
          DUP ;
          DUP ;
          PUSH string "sComplianceInfo" ;
          PACK ;
          GET ;
          IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ;
          UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ;
          IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ;
          CAR ;
          CAR ;
          CAR ;
          DIP { PUSH string "sNumOfInvestors" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfInvestors" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfInvestors" ; FAILWITH } {} ; PUSH nat 1 ; SWAP ; SUB ; ISNAT ; IF_NONE { PUSH string "Negative amount of investors" ; FAILWITH } {} } ;
          COMPARE ;
          GE ;
          IF {} { PUSH (pair string unit) (Pair "MaxNumberOfInvestorsViolation" Unit) ; FAILWITH } }
        { DROP } } } ; DUP ; CDR ; CAR ; DIP { CDR ; CDR } ; DIP { DIP { DUP } ; SWAP } ; PUSH string "sWallets" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair string (pair address address)) }
        { UNPACK (pair string (pair address address)) ;
          IF_NONE { PUSH string "UStore: failed to unpack sWallets" ; FAILWITH } {} ;
          SOME } ; IF_NONE { PUSH (pair string unit) (Pair "WalletDoesNotExist" Unit) ;
          FAILWITH }
        { CAR } ; DIP { DUP } ; SWAP ; PUSH nat 0 ; COMPARE ; EQ ; IF { DROP ;
     DROP }
   { DIP { DIP { DUP } ; SWAP } ;
     SWAP ;
     DIP { DUP } ;
     SWAP ;
     PUSH string "sInvestorsBalances" ;
     PAIR ;
     PACK ;
     GET ;
     IF_NONE { NONE nat }
             { UNPACK nat ;
               IF_NONE { PUSH string "UStore: failed to unpack sInvestorsBalances" ; FAILWITH } {} ;
               SOME } ;
     IF_NONE { PUSH nat 0 } {} ;
     DIP { SWAP } ;
     DIP { DROP } ;
     PUSH nat 0 ;
     COMPARE ;
     EQ ;
     IF { DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          PUSH string "sInvestors" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CAR } ;
          IF_NONE { DROP ;
                    PUSH nat 0 }
                  { PUSH string "sCountryStatuses" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} } ;
          PUSH nat 1 ;
          COMPARE ;
          EQ ;
          IF { DIP { DUP ; DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CAR ; CDR ; CAR ; CAR ; IF_NONE { DROP }
                  { DIP { PUSH string "sNumOfUSInvestors" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfUSInvestors" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfUSInvestors" ; FAILWITH } {} ; PUSH nat 1 ; ADD } ;
                    COMPARE ;
                    GE ;
                    IF {} { PUSH (pair string unit) (Pair "MaxNumberOfUSInvestorsViolation" Unit) ; FAILWITH } } } } {} ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          PUSH string "sInvestors" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CDR ;
                    CDR ;
                    DIP { PUSH bool False } ;
                    ITER { DUP ; CAR ; DIP { CDR } ; PUSH nat 2 ; AND ; PUSH nat 0 ; COMPARE ; NEQ ; DIP { CAR ; PUSH nat 1 ; COMPARE ; EQ } ; AND ; OR } } ;
          NOT ;
          IF { DIP { DUP ; DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CAR ; CDR ; CDR ; CAR ; IF_NONE { DROP }
                  { DIP { PUSH string "sNumOfNonAccrInvs" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfNonAccrInvs" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfNonAccrInvs" ; FAILWITH } {} ; PUSH nat 1 ; ADD } ;
                    COMPARE ;
                    GE ;
                    IF {} { PUSH (pair string unit) (Pair "MaxNumberOfNonAccreditedInvestorsViolation" Unit) ; FAILWITH } } } } {} ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DIP { DIP { DUP } ; PUSH string "sInvestors" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ; IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CAR } ; IF_NONE { DROP ;
                    PUSH nat 0 }
                  { PUSH string "sCountryStatuses" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} } ; PUSH nat 1 ; COMPARE ; EQ } } ;
          PUSH string "sInvestors" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CDR ;
                    CDR ;
                    DIP { PUSH bool False } ;
                    ITER { DUP ; CAR ; DIP { CDR } ; PUSH nat 2 ; AND ; PUSH nat 0 ; COMPARE ; NEQ ; DIP { CAR ; PUSH nat 1 ; COMPARE ; EQ } ; AND ; OR } } ;
          NOT ;
          NOT ;
          AND ;
          IF { DIP { DUP ; DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CAR ; CDR ; CAR ; CDR ; IF_NONE { DROP }
                  { DIP { PUSH string "sNumOfUSAccrInvs" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfUSAccrInvs" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfUSAccrInvs" ; FAILWITH } {} ; PUSH nat 1 ; ADD } ;
                    COMPARE ;
                    GE ;
                    IF {} { PUSH (pair string unit) (Pair "MaxNumberOfUSAccreditedInvestorsViolation" Unit) ; FAILWITH } } } } {} ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DUP } ;
          SWAP ;
          DIP { DIP { PUSH string "sInvestors" ; PAIR ; PACK ; GET ; IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ; IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CDR ;
                    CDR ;
                    DIP { PUSH bool False } ;
                    ITER { DUP ; CAR ; DIP { CDR } ; PUSH nat 12 ; AND ; PUSH nat 0 ; COMPARE ; NEQ ; DIP { CAR ; PUSH nat 1 ; COMPARE ; EQ } ; AND ; OR } } ; NOT } } ;
          DIP { DUP } ;
          PUSH string "sInvestors" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CAR } ;
          IF_NONE { DROP ;
                    PUSH nat 0 }
                  { PUSH string "sCountryStatuses" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} } ;
          PUSH nat 2 ;
          COMPARE ;
          EQ ;
          AND ;
          IF { DIP { DUP ; DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CDR ; CDR ; CAR ; CDR ; DIP { PUSH string "sNumOfEURetailers" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfEURetailers" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfEURetailers" ; FAILWITH } {} ; PUSH nat 1 ; ADD } ; COMPARE ; GE ; IF {} { PUSH (pair string unit) (Pair "MaxNumberOfEURetailInvestorsViolation" Unit) ; FAILWITH } } } {} ;
          DIP { DUP } ;
          DIP { DUP } ;
          PUSH string "sInvestors" ;
          PAIR ;
          PACK ;
          GET ;
          IF_NONE { NONE (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) }
                  { UNPACK (pair (pair (set address) address) (pair (option string) (pair address (map nat (pair nat (pair timestamp (option bytes))))))) ;
                    IF_NONE { PUSH string "UStore: failed to unpack sInvestors" ; FAILWITH } {} ;
                    SOME } ;
          IF_NONE { PUSH (pair string unit) (Pair "InvestorDoesNotExist" Unit) ;
                    FAILWITH }
                  { CDR ;
                    CAR } ;
          IF_NONE { DROP ;
                    PUSH nat 0 }
                  { PUSH string "sCountryStatuses" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sCountryStatuses" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} } ;
          PUSH nat 1 ;
          COMPARE ;
          EQ ;
          IF { DUP ;
               PUSH string "sNumOfUSInvestors" ;
               PACK ;
               GET ;
               IF_NONE { PUSH string "UStore: no field sNumOfUSInvestors" ; FAILWITH } {} ;
               UNPACK nat ;
               IF_NONE { PUSH string "UStore: failed to unpack sNumOfUSInvestors" ; FAILWITH } {} ;
               PUSH nat 1 ;
               ADD }
             { DUP ;
               PUSH string "sNumOfUSInvestors" ;
               PACK ;
               GET ;
               IF_NONE { PUSH string "UStore: no field sNumOfUSInvestors" ; FAILWITH } {} ;
               UNPACK nat ;
               IF_NONE { PUSH string "UStore: failed to unpack sNumOfUSInvestors" ; FAILWITH } {} } ;
          DIP { DUP ; PUSH string "sNumOfInvestors" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfInvestors" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfInvestors" ; FAILWITH } {} ; PUSH nat 1 ; ADD } ;
          DIP { DIP { DUP ; PUSH string "sComplianceInfo" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ; UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ; IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ; CAR ; CDR ; CDR ; CDR } ; MUL } ;
          PUSH nat 100 ;
          MUL ;
          COMPARE ;
          LE ;
          IF {} { PUSH (pair string unit) (Pair "MaxPercentageOfUSInvestorsViolation" Unit) ; FAILWITH } ;
          DUP ;
          DUP ;
          PUSH string "sComplianceInfo" ;
          PACK ;
          GET ;
          IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ;
          UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ;
          IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ;
          CDR ;
          CAR ;
          CDR ;
          CAR ;
          DIP { PUSH string "sNumOfInvestors" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfInvestors" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfInvestors" ; FAILWITH } {} ; PUSH nat 1 ; ADD } ;
          COMPARE ;
          LE ;
          IF {} { PUSH (pair string unit) (Pair "MinNumberOfInvestorsViolation" Unit) ; FAILWITH } ;
          DUP ;
          DUP ;
          PUSH string "sComplianceInfo" ;
          PACK ;
          GET ;
          IF_NONE { PUSH string "UStore: no field sComplianceInfo" ; FAILWITH } {} ;
          UNPACK (pair (pair (pair nat (pair nat nat)) (pair (pair (option nat) (option nat)) (pair (option nat) nat))) (pair (pair (pair bool bool) (pair nat nat)) (pair (pair (option nat) nat) (pair bool bool)))) ;
          IF_NONE { PUSH string "UStore: failed to unpack sComplianceInfo" ; FAILWITH } {} ;
          CAR ;
          CAR ;
          CAR ;
          DIP { PUSH string "sNumOfInvestors" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumOfInvestors" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumOfInvestors" ; FAILWITH } {} ; PUSH nat 1 ; ADD } ;
          COMPARE ;
          GE ;
          IF {} { PUSH (pair string unit) (Pair "MaxNumberOfInvestorsViolation" Unit) ; FAILWITH } }
        { DROP } } } ; PACK ; SOME ; PUSH string "sPreTransferCheckTotalRules" ; PACK ; UPDATE }))