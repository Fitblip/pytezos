Right (Left (Right { PUSH (lambda (pair bytes (big_map bytes bytes)) (pair (list operation) (big_map bytes bytes))) { DUP ; CAR ; DIP { CDR } ; UNPACK (or (or address (pair address nat)) (or address (pair address (lambda nat nat)))) ; IF_NONE { PUSH (pair string unit) (Pair "ArgumentUnpackFailed" Unit) ; FAILWITH } {} ; PAIR ; DUP ; CAR ; DIP { CDR } ; IF_LEFT { IF_LEFT { DUP ;
                    DIP { DIP { PUSH nat 1 } ; PAIR ; RIGHT (pair string address) ; RIGHT (or (pair string (pair nat (pair nat (pair timestamp (option bytes))))) (pair string address)) ; RIGHT (or string (or string (pair string (option string)))) ; LEFT (or (or (or (pair address nat) (pair (pair address (pair nat (option timestamp))) (pair (option nat) (pair (option string) (option timestamp))))) (or (pair address (pair address nat)) (pair address (pair address nat)))) (or (or (pair address (pair nat (option string))) (pair (pair address address) (pair nat (option string)))) (or unit unit))) ; DIP { DUP } ; SWAP ; PUSH string "sNumberOfLastEvent" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumberOfLastEvent" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumberOfLastEvent" ; FAILWITH } {} ; PUSH nat 1 ; ADD ; DUP ; DIP { DIP { DIP { DUP } ; SWAP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sEvents" ; PAIR ; PACK ; MEM ; IF { PUSH (pair string unit) (Pair "EventAlreadyExists" Unit) ;
                         FAILWITH }
                       { PUSH string "sEvents" ;
                         PAIR ;
                         PACK ;
                         DIP { PACK ; SOME } ;
                         UPDATE } } ; PACK ; SOME ; PUSH string "sNumberOfLastEvent" ; PACK ; UPDATE } ;
                    DIP { DUP } ;
                    SWAP ;
                    SENDER ;
                    PUSH string "sRoles" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} ;
                    PUSH nat 1 ;
                    AND ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    NOT ;
                    IF {} { PUSH (pair string nat) (Pair "InvalidRole" 1) ; FAILWITH } ;
                    DIP { PUSH nat 0 ; DIP { DUP } ; SWAP ; PUSH string "sMaster" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sMaster" ; FAILWITH } {} ; UNPACK address ; IF_NONE { PUSH string "UStore: failed to unpack sMaster" ; FAILWITH } {} ; DUP ; DIP { SWAP } ; DIP { DIP { DIP { PUSH nat 1 } ; PAIR ; LEFT (pair (pair address (pair nat (option timestamp))) (pair (option nat) (pair (option string) (option timestamp)))) ; LEFT (or (pair address (pair address nat)) (pair address (pair address nat))) ; LEFT (or (or (pair address (pair nat (option string))) (pair (pair address address) (pair nat (option string)))) (or unit unit)) ; RIGHT (or (or string (or string (pair string (option string)))) (or (or (pair string (pair nat (pair nat (pair timestamp (option bytes))))) (pair string address)) (or (pair string address) (pair address nat)))) ; DIP { DUP } ; SWAP ; PUSH string "sNumberOfLastEvent" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumberOfLastEvent" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumberOfLastEvent" ; FAILWITH } {} ; PUSH nat 1 ; ADD ; DUP ; DIP { DIP { DIP { DUP } ; SWAP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sEvents" ; PAIR ; PACK ; MEM ; IF { PUSH (pair string unit) (Pair "EventAlreadyExists" Unit) ;
                         FAILWITH }
                       { PUSH string "sEvents" ;
                         PAIR ;
                         PACK ;
                         DIP { PACK ; SOME } ;
                         UPDATE } } ; PACK ; SOME ; PUSH string "sNumberOfLastEvent" ; PACK ; UPDATE } } ; DIP { DIP { DUP } ; SWAP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sRoles" ; PAIR ; PACK ; GET ; IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                              SOME } ; IF_NONE { PUSH nat 0 } {} ; PUSH nat 0 ; COMPARE ; EQ ; DIP { DIP { DUP } ; SWAP ; PUSH nat 0 ; COMPARE ; EQ } ; OR ; IF {} { PUSH (pair string unit) (Pair "DirectRoleChange" Unit) ; FAILWITH } ; DIP { DUP } ; SWAP ; PUSH nat 0 ; COMPARE ; EQ ; IF { DIP { DROP } ;
                         PUSH string "sRoles" ;
                         PAIR ;
                         PACK ;
                         DIP { NONE bytes } ;
                         UPDATE }
                       { PUSH string "sRoles" ;
                         PAIR ;
                         PACK ;
                         DIP { PACK ; SOME } ;
                         UPDATE } } ;
                    DUP ;
                    DIP { DIP { PUSH nat 1 } ; DIP { DIP { DUP } ; SWAP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sRoles" ; PAIR ; PACK ; GET ; IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                              SOME } ; IF_NONE { PUSH nat 0 } {} ; PUSH nat 0 ; COMPARE ; EQ ; DIP { DIP { DUP } ; SWAP ; PUSH nat 0 ; COMPARE ; EQ } ; OR ; IF {} { PUSH (pair string unit) (Pair "DirectRoleChange" Unit) ; FAILWITH } ; DIP { DUP } ; SWAP ; PUSH nat 0 ; COMPARE ; EQ ; IF { DIP { DROP } ;
                         PUSH string "sRoles" ;
                         PAIR ;
                         PACK ;
                         DIP { NONE bytes } ;
                         UPDATE }
                       { PUSH string "sRoles" ;
                         PAIR ;
                         PACK ;
                         DIP { PACK ; SOME } ;
                         UPDATE } } ;
                    PACK ;
                    SOME ;
                    PUSH string "sMaster" ;
                    PACK ;
                    UPDATE ;
                    NIL operation }
                  { DUP ;
                    DIP { RIGHT (pair string address) ; RIGHT (or (pair string (pair nat (pair nat (pair timestamp (option bytes))))) (pair string address)) ; RIGHT (or string (or string (pair string (option string)))) ; LEFT (or (or (or (pair address nat) (pair (pair address (pair nat (option timestamp))) (pair (option nat) (pair (option string) (option timestamp))))) (or (pair address (pair address nat)) (pair address (pair address nat)))) (or (or (pair address (pair nat (option string))) (pair (pair address address) (pair nat (option string)))) (or unit unit))) ; DIP { DUP } ; SWAP ; PUSH string "sNumberOfLastEvent" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumberOfLastEvent" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumberOfLastEvent" ; FAILWITH } {} ; PUSH nat 1 ; ADD ; DUP ; DIP { DIP { DIP { DUP } ; SWAP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sEvents" ; PAIR ; PACK ; MEM ; IF { PUSH (pair string unit) (Pair "EventAlreadyExists" Unit) ;
                         FAILWITH }
                       { PUSH string "sEvents" ;
                         PAIR ;
                         PACK ;
                         DIP { PACK ; SOME } ;
                         UPDATE } } ; PACK ; SOME ; PUSH string "sNumberOfLastEvent" ; PACK ; UPDATE } ;
                    DIP { DUP } ;
                    SWAP ;
                    SENDER ;
                    PUSH string "sRoles" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} ;
                    PUSH nat 3 ;
                    AND ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    NOT ;
                    IF {} { PUSH (pair string nat) (Pair "InvalidRole" 3) ; FAILWITH } ;
                    DUP ;
                    CAR ;
                    DIP { CDR } ;
                    DIP { DUP } ;
                    SWAP ;
                    PUSH nat 6 ;
                    AND ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    NOT ;
                    IF {} { PUSH (pair string nat) (Pair "InvalidRole" 6) ; FAILWITH } ;
                    DIP { DIP { DUP } ; SWAP } ;
                    SWAP ;
                    DIP { DUP } ;
                    SWAP ;
                    PUSH string "sRoles" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    DIP { DIP { DUP } ; SWAP ; PUSH nat 0 ; COMPARE ; EQ } ;
                    OR ;
                    IF {} { PUSH (pair string unit) (Pair "DirectRoleChange" Unit) ; FAILWITH } ;
                    DIP { DUP } ;
                    SWAP ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    IF { DIP { DROP } ;
                         PUSH string "sRoles" ;
                         PAIR ;
                         PACK ;
                         DIP { NONE bytes } ;
                         UPDATE }
                       { PUSH string "sRoles" ;
                         PAIR ;
                         PACK ;
                         DIP { PACK ; SOME } ;
                         UPDATE } ;
                    NIL operation } }
        { IF_LEFT { DUP ;
                    DIP { DIP { DUP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sRoles" ; PAIR ; PACK ; GET ; IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                              SOME } ; IF_NONE { PUSH nat 0 } {} ; SWAP ; PAIR ; LEFT (pair (pair address (pair nat (option timestamp))) (pair (option nat) (pair (option string) (option timestamp)))) ; LEFT (or (pair address (pair address nat)) (pair address (pair address nat))) ; LEFT (or (or (pair address (pair nat (option string))) (pair (pair address address) (pair nat (option string)))) (or unit unit)) ; RIGHT (or (or string (or string (pair string (option string)))) (or (or (pair string (pair nat (pair nat (pair timestamp (option bytes))))) (pair string address)) (or (pair string address) (pair address nat)))) ; DIP { DUP } ; SWAP ; PUSH string "sNumberOfLastEvent" ; PACK ; GET ; IF_NONE { PUSH string "UStore: no field sNumberOfLastEvent" ; FAILWITH } {} ; UNPACK nat ; IF_NONE { PUSH string "UStore: failed to unpack sNumberOfLastEvent" ; FAILWITH } {} ; PUSH nat 1 ; ADD ; DUP ; DIP { DIP { DIP { DUP } ; SWAP } ; SWAP ; DIP { DUP } ; SWAP ; PUSH string "sEvents" ; PAIR ; PACK ; MEM ; IF { PUSH (pair string unit) (Pair "EventAlreadyExists" Unit) ;
                         FAILWITH }
                       { PUSH string "sEvents" ;
                         PAIR ;
                         PACK ;
                         DIP { PACK ; SOME } ;
                         UPDATE } } ; PACK ; SOME ; PUSH string "sNumberOfLastEvent" ; PACK ; UPDATE } ;
                    DIP { DUP } ;
                    SWAP ;
                    SENDER ;
                    PUSH string "sRoles" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} ;
                    PUSH nat 3 ;
                    AND ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    NOT ;
                    IF {} { PUSH (pair string nat) (Pair "InvalidRole" 3) ; FAILWITH } ;
                    DIP { DUP } ;
                    SWAP ;
                    DIP { DUP } ;
                    SWAP ;
                    PUSH string "sRoles" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} ;
                    PUSH nat 6 ;
                    AND ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    NOT ;
                    IF {} { PUSH (pair string nat) (Pair "InvalidRole" 6) ; FAILWITH } ;
                    DIP { PUSH nat 0 } ;
                    DIP { DIP { DUP } ; SWAP } ;
                    SWAP ;
                    DIP { DUP } ;
                    SWAP ;
                    PUSH string "sRoles" ;
                    PAIR ;
                    PACK ;
                    GET ;
                    IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                              SOME } ;
                    IF_NONE { PUSH nat 0 } {} ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    DIP { DIP { DUP } ; SWAP ; PUSH nat 0 ; COMPARE ; EQ } ;
                    OR ;
                    IF {} { PUSH (pair string unit) (Pair "DirectRoleChange" Unit) ; FAILWITH } ;
                    DIP { DUP } ;
                    SWAP ;
                    PUSH nat 0 ;
                    COMPARE ;
                    EQ ;
                    IF { DIP { DROP } ;
                         PUSH string "sRoles" ;
                         PAIR ;
                         PACK ;
                         DIP { NONE bytes } ;
                         UPDATE }
                       { PUSH string "sRoles" ;
                         PAIR ;
                         PACK ;
                         DIP { PACK ; SOME } ;
                         UPDATE } ;
                    NIL operation }
                  { DUP ;
                    CAR ;
                    DIP { CDR } ;
                    SWAP ;
                    DIP { PUSH string "sRoles" ; PAIR ; PACK ; GET ; IF_NONE { NONE nat }
                            { UNPACK nat ;
                              IF_NONE { PUSH string "UStore: failed to unpack sRoles" ; FAILWITH } {} ;
                              SOME } ; IF_NONE { PUSH nat 0 } {} } ;
                    SWAP ;
                    EXEC ;
                    PUSH string "VoidResult" ;
                    PAIR ;
                    FAILWITH } } ; PAIR } ; PUSH string "callTrust" ; PUSH string "code" ; PAIR ; PACK ; DIP { PACK ; SOME } ; UPDATE }))